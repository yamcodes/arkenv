import type { EnvSchema } from "arkenv";
import { createEnv } from "arkenv";
import { loadEnv, type Plugin } from "vite";
import { writeFileSync, existsSync, mkdirSync } from "fs";
import { join, dirname } from "path";

/**
 * Generate TypeScript type definitions for environment variables
 */
function generateEnvTypes(schema: Record<string, string | undefined>): string {
	const envVarTypes: string[] = [];
	
	for (const [key, arkTypeDefinition] of Object.entries(schema)) {
		// Map arktype definitions to TypeScript types
		let tsType: string;
		
		if (!arkTypeDefinition) {
			tsType = "string | undefined";
		} else if (arkTypeDefinition.includes("string")) {
			tsType = "string";
		} else if (arkTypeDefinition.includes("number")) {
			tsType = "number";
		} else if (arkTypeDefinition.includes("boolean")) {
			tsType = "boolean";
		} else if (arkTypeDefinition.includes("|")) {
			// Handle union types like "'development' | 'production' | 'test'"
			tsType = arkTypeDefinition;
		} else {
			// Default to string for unknown types
			tsType = "string";
		}
		
		envVarTypes.push(`    readonly ${key}: ${tsType};`);
	}
	
	return `/// <reference types="vite/client" />

// Generated by @arkenv/vite-plugin
declare interface ImportMetaEnv {
${envVarTypes.join('\n')}
}`;
}

export default function arkenv<
	const T extends Record<string, string | undefined>,
>(options: EnvSchema<T>): Plugin {
	return {
		name: "@arkenv/vite-plugin",
		config(_config, { mode }) {
			createEnv(options, loadEnv(mode, process.cwd(), ""));
		},
		configResolved(config) {
			// Generate type definitions file that extends vite-env.d.ts
			const root = config.root || process.cwd();
			const typesFile = join(root, 'src', 'vite-env.d.ts');
			
			try {
				// Ensure the src directory exists
				const srcDir = dirname(typesFile);
				if (!existsSync(srcDir)) {
					mkdirSync(srcDir, { recursive: true });
				}
				
				const typesContent = generateEnvTypes(options);
				writeFileSync(typesFile, typesContent);
			} catch (error) {
				// Log warning but don't fail the build
				console.warn('ArkEnv: Could not write type definitions file:', error);
			}
		},
	};
}
