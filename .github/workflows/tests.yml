name: tests

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}

jobs:
  test:
    timeout-minutes: 4
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        node-version: [22, lts/*, latest]
      fail-fast: false

    steps:
      - id: checkout
        name: Checkout
        uses: actions/checkout@v5

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Run test
        run: pnpm turbo run test

  test-typesafety:
    timeout-minutes: 4
    runs-on: ubuntu-latest
    steps:
      - id: checkout
        name: Checkout
        uses: actions/checkout@v5

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v5
        with:
          node-version: 22
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Run typecheck
        run: pnpm run typecheck

  test-build:
    timeout-minutes: 4
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22, lts/*, latest]

    steps:
      - id: checkout
        name: Checkout
        uses: actions/checkout@v5

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: Install Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.21

      - name: Install dependencies
        run: pnpm install

      - name: Run build
        run: pnpm run build

  test-e2e:
    timeout-minutes: 8
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0 # for checking against main

      - name: Fetch base commit for PRs
        if: ${{ github.event_name == 'pull_request' }}
        shell: bash
        run: |
          BASE_SHA='${{ github.event.pull_request.base.sha }}'
          BASE_REF='${{ github.event.pull_request.base.ref }}'
          BASE_REPO='${{ github.event.pull_request.base.repo.full_name }}'
          THIS_REPO='${{ github.repository }}'
          if [ "$BASE_REPO" != "$THIS_REPO" ]; then
            git remote add upstream '${{ github.event.pull_request.base.repo.clone_url }}'
            # Fetch the exact base SHA to avoid shallow-history issues
            git fetch --no-tags --depth=1 upstream "$BASE_SHA"
          else
            git fetch --no-tags --depth=1 origin "$BASE_SHA"
          fi

      # Set Turbo base/head for PRs, see: https://turborepo.com/docs/reference/run#--affected
      - name: Set Turbo base/head for PRs
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "TURBO_SCM_BASE=${{ github.event.pull_request.base.sha }}" >> $GITHUB_ENV
          echo "TURBO_SCM_HEAD=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v5
        with:
          node-version: 22
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-pw-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pw-

      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps

      - name: Start web server in background
        run: |
          echo "Starting web server in background..."
          pnpm --filter=www run dev &
          WEB_SERVER_PID=$!
          echo "WEB_SERVER_PID=$WEB_SERVER_PID" >> $GITHUB_ENV
          echo "Web server started with PID: $WEB_SERVER_PID"

      - name: Verify web server is running
        run: |
          echo "Waiting for web server to be accessible..."
          echo "Checking if web server is accessible..."
          timeout 120 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do 
            echo "Waiting for web server... ($(date))"
            sleep 2
          done' || {
            echo "Web server not accessible after 120 seconds"
            echo "Checking if web server process is still running..."
            ps aux | grep -E "(next|node)" | grep -v grep || echo "No web server processes found"
            echo "Checking port 3000..."
            netstat -tlnp | grep :3000 || echo "Port 3000 not in use"
            exit 1
          }
          echo "Web server is accessible!"

      - name: Run E2E (PR)
        if: ${{ github.event_name == 'pull_request' }}
        run: pnpm run test:e2e --affected
        env:
          CI: true
          PLAYWRIGHT_TIMEOUT: 300000
          DEBUG: pw:api

      # Pushes to main - run everything
      - name: Run E2E (main)
        if: ${{ github.event_name != 'pull_request' }}
        run: pnpm run test:e2e
        env:
          CI: true
          PLAYWRIGHT_TIMEOUT: 300000
          DEBUG: pw:api

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: |
            **/playwright-report/**
          retention-days: 30
